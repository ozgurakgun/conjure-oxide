searchState.loadedDescShard("minion_rs", 0, "This crate provides low level Rust bindings to the Minion …\nThe callback function used to capture results from Minion …\nTypes used for representing Minion models in Rust.\nError types.\nGets a given value from Minion’s TableOut (where it …\nRun Minion on the given Model.\nRepresentation of a Minion constant.\nAll supported Minion constraints.\nA Minion model.\nStores all named variables in a Minion model alongside …\nRepresentation of a Minion Variable.\nRepresentation of variable domains.\nCreates a new variable and adds it to the symbol table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the canonical ordering of variables.\nGets the domain of a named variable.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an empty Minion model.\nThe model given to Minion is invalid.\nWraps all error types returned by <code>minion_rs</code>.\nThe input model uses Minion features that are not yet …\nCatch-all error.\nErrors thrown by Minion during execution.\nAn error has occurred during the execution of Minion.\nAn unknown error has occurred.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")